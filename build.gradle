import org.gradle.api.artifacts.maven.MavenDeployment

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Settings
ext {
    project_group = 'com.github.rholder.nlp'
    project_version = '0.1.0-SNAPSHOT'
    project_jdk = '1.6'
    project_pom = {
        name 'fast-tag'
        packaging 'jar'
        description "This is a fork of Mark Watson's part of speech tagger."
        url 'http://rholder.github.com'

        scm {
            url 'scm:git@github.com:rholder/fast-tag.git'
            connection 'scm:git@github.com:rholder/fast-tag.git'
            developerConnection 'scm:git@github.com:rholder/fast-tag.git'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }

        developers {
            developer {
                id 'rholder'
                name 'Ray Holder'
            }
        }
    }

    defaultBlank = { closure ->
        try {
            closure()
        } catch (MissingPropertyException e) {
            ''
        }
    }
}

allprojects {
    apply plugin: 'idea'
}

subprojects {

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Identifiers

    group = project_group
    version = project_version
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Plugins

    apply plugin: 'java'
    sourceCompatibility = project_jdk
    targetCompatibility = project_jdk

    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'signing'

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Dependencies

    repositories {
        mavenCentral()
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Artifacts

    /** Function always returns a new manifest that can be customized */
    ext.defaultManifest = {
        return manifest {
            def git_cmd = "git rev-parse HEAD"
            def git_proc = git_cmd.execute()
            attributes 'SCM-Revision': git_proc.text.trim()
            attributes 'Timestamp': String.valueOf(System.currentTimeMillis())
            attributes 'Build-Host': InetAddress.localHost.hostName
        }
    }

    jar {
        doFirst {
            // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
            manifest = defaultManifest()
        }
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
        doFirst {
            // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
            manifest = defaultManifest()
        }
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
        doFirst {
            // Timestamp changes on every build. By evaluating it later, won't needlessly fail up-to-date checks.
            manifest = defaultManifest()
        }
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Publishing

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        // by default, mark individual projects back to true for inclusion in publishing
        enabled = false

        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                // for snapshots https://oss.sonatype.org/content/repositories/snapshots
                // for staging/release https://oss.sonatype.org/service/local/staging/deploy/maven2
                repository(
                        url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                ) {
                    // If these are not defined assemble needlessly fails for unrelated tasks, hence, defaultBlank.
                    authentication(userName: defaultBlank({ sonatypeUsername }), password: defaultBlank({ sonatypePassword }))
                }

                pom.project project_pom
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Utilities

// enable Gradle Wrapper support for bootstrapping with specific version
task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IDE

idea {
    module {
        downloadSources = true
    }
    project {
        languageLevel = project_jdk
        vcs = 'Git'
    }
}

